- name: Remove hostname from /etc/hosts
  become: True
  lineinfile:
    path: /etc/hosts
    regexp: '^(127\.0\.0\.1|::1)[ \t]+{{ ipa.hostname }}.*$'
    state: absent

- name: Install IPA server
  become: True
  shell: |
    /usr/sbin/ipa-server-install --unattended          \
      --realm={{ ipa.domain | upper | quote }}         \
      --domain={{ ipa.domain | quote }}                \
      --ds-password={{ ipa.password | quote }}         \
      --admin-password={{ ipa.password | quote }}      \
      --hostname={{ ipa.fqn | quote }}                 \
      --setup-dns                                      \
      --auto-forwarders                                \
      --auto-reverse                                   \
      --no-dnssec-validation                           \
      --no-host-dns
  register: ipa_installation
  args:
    creates: /etc/ipa/default.conf

- name: Remove vagrant IP addresses from /etc/hosts because they can change over time
  become: True
  lineinfile:
    path: /etc/hosts
    regexp: '^(?!{{ ipa.ip }}).*master.ipa.vm master$'
    state: absent
  register: etc_hosts

- name: Create /etc/NetworkManager/conf.d/disable_dns.conf
  become: True
  template:
    src: disable_dns.conf
    dest: /etc/NetworkManager/conf.d/disable_dns.conf
    owner: root
    group: root
    mode: 0644
  register: nm_conf

- name: Start NetworkManager
  become: True
  service:
    name: NetworkManager.service
    enabled: yes
    state: started

- name: Reload NetworkManager configuration
  become: True
  shell: |
    nmcli con reload
  args:
    warn: False
  when: etc_hosts.changed or nm_conf.changed

- name: Remove vagrant DNS A records
  shell: |
    echo {{ ipa.password | quote }} | kinit admin

    ipa dnsrecord-show {{ item.zone | quote }} {{ item.name | quote }} |  grep {{ item.ip |  quote }}
    if [ $? -ne 1 ]; then
      echo "Record {{ item.ip | quote }} in {{ item.name | quote }}.{{ item.zone | quote }} is not present. Nothing to do."
      exit 255
    fi

    ipa dnsrecord-del {{ item.zone | quote }} {{ item.name | quote }} \
      --a-rec={{ item.ip | quote }}
  register: result
  failed_when: "result.rc != 255 and result.rc != 0"
  changed_when: "result.rc == 0"
  with_items:
  - { zone: '{{ ipa.domain }}', name: 'ipa-ca', ip: '{{ ansible_default_ipv4.address }}'}
  - { zone: '{{ ipa.domain }}', name: '{{ ipa.hostname }}', ip: '{{ ansible_default_ipv4.address }}'}

- name: Create pw-never-expires group
  shell: |
    echo {{ ipa.password | quote }} | kinit admin

    ipa group-show pw-never-expires
    if [ $? -eq 0 ]; then
      echo "Group already exist. Nothing to do."
      exit 255
    fi

    ipa group-add pw-never-expires
  register: result
  failed_when: "result.rc != 255 and result.rc != 0"
  changed_when: "result.rc == 0"

- name: Create pw-never-expires password policy
  shell: |
    echo {{ ipa.password | quote }} | kinit admin

    ipa pwpolicy-show pw-never-expires
    if [ $? -eq 0 ]; then
      echo "Policy already exist. Nothing to do."
      exit 255
    fi

    ipa pwpolicy-add pw-never-expires --maxlife=0 --minlife=0 --priority=0
  register: result
  failed_when: "result.rc != 255 and result.rc != 0"
  changed_when: "result.rc == 0"

- name: Add admin to pw-never-expires group
  shell: |
    echo {{ ipa.password | quote }} | kinit admin

    ipa user-show admin | grep pw-never-expires
    if [ $? -eq 0 ]; then
      echo "Admin is already member of the group. Nothing to do."
      exit 255
    fi

    ipa group-add-member pw-never-expires --users=admin
  register: groupresult
  failed_when: "groupresult.rc != 255 and groupresult.rc != 0"
  changed_when: "groupresult.rc == 0"

- name: Reset admin password to apply pw-never-expires policy
  shell: |
    echo {{ ipa.password | quote }} | kinit admin

    ipa user-show admin | grep "User password expiration"
    if [ $? -ne 1 ]; then
      echo "Policy is already applied. Nothing to do."
      exit 255
    fi

    echo {{ ipa.password | quote }} | ipa user-mod admin --password
  register: result
  failed_when: "result.rc != 255 and result.rc != 0"
  changed_when: "result.rc == 0"
  when: groupresult.changed
